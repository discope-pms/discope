version: 2.1

# Define the jobs we want to run for this project.
# We always test 2 previous PHP versions.
jobs:
  php_7-4:
    docker:
    - image: php:7.4-apache
    - image: mysql:5.7
      environment:
        MYSQL_ROOT_PASSWORD: test
        MYSQL_DATABASE: equal
    working_directory: ~/repo
    steps:
      # install PHP dependencies
      - run: apt-get update && apt-get -y install git libzip-dev
      - run: docker-php-ext-install pdo pdo_mysql mysqli zip
      - run: docker-php-ext-enable mysqli
      # install equal
      - run:
          name: Clone equal (#todo - use dockerhub image)
          command: |
            git clone https://github.com/equalframework/equal.git ~/repo
            git checkout dev-2.0
            mv ~/repo/packages ~/repo/packages.core
      - checkout:
          path: ~/repo/packages
      - run:
          name: Copy core package
          command: |
            cp -r ~/repo/packages.core/core ~/repo/packages/
      - run:
          name: List files in config directory
          command: ls -la ~/repo/config/
      # create a config file with Discope specifics
      - run:
          name: Create a config file with Discope specifics
          command: |
            echo '{"DEFAULT_LANG": "fr", "ORM_EVENTS_FORCE_ONUPDATE_AT_CREATION": true}' > ~/repo/config/config.json
      # Verify the content of the file
      - run:
          name: Verify the content of the config file
          command: cat ~/repo/config/config.json
      - run:
          name: List files in repo directory
          command: ls -la ~/repo/
      - run:
          name: Create a composer.json file
          command: |
            echo '{
              "require": {
                "swiftmailer/swiftmailer": "^6.2",
                "phpoffice/phpspreadsheet": "^1.4",
                "dompdf/dompdf": "^0.8.3",
                "electrolinux/phpquery": "^0.9.6",
                "twig/twig": "^2.0",
                "twig/intl-extra": "^3.3",
                "smhg/sepa-qr-data": "^1.1",
                "endroid/qr-code": "^4.3",
                "codelicious/php-coda-parser": "^2.0"
              },
              "require-dev": {
                "phpunit/phpunit": "^9.5",
                "phpunit/php-code-coverage": "^9.2",
                "symplify/easy-coding-standard": "^11.1"
              }
            }' > ~/repo/composer.json
      # Verify the composer of the file
      - run:
          name: Verify the content of the config file
          command: cat ~/repo/composer.json
      # assign folders permissions
      - run: php run.php --do=init_fs
      # check that mandatory directories are present and have correct access rights set
      - run: php run.php --do=test_fs-consistency
      # check ability to connect to the dbms service
      - run: php run.php --do=test_db-connectivity
      # create an empty database
      - run: php run.php --do=init_db
      # initialize database with demo data
      - run: php run.php --do=init_package --package=discope
      # run test units
      - run: php run.php --do=test_package --package=core
      - run: php run.php --do=test_package --package=discope
      # export logs on failure
      - run:
          command: |
            mkdir -p /tmp/dumps
            cp ~/repo/log/equal.log /tmp/dumps
          when: on_fail
      - store_artifacts:
          path: /tmp/dumps
  php_8-3:
    docker:
    - image: php:8.3-apache
    - image: mysql:5.7
      environment:
        MYSQL_ROOT_PASSWORD: test
        MYSQL_DATABASE: equal
    working_directory: ~/repo
    steps:
      # install PHP dependencies
      - run: apt-get update && apt-get -y install git libzip-dev
      - run: docker-php-ext-install pdo pdo_mysql mysqli zip
      - run: docker-php-ext-enable mysqli
      # install equal
      - run:
          name: Clone equal (#todo - use dockerhub image)
          command: |
            git clone https://github.com/equalframework/equal.git ~/repo
            git checkout dev-2.0
            mv ~/repo/packages ~/repo/packages.core
      - checkout:
          path: ~/repo/packages
      - run:
          name: Copy core package
          command: |
            cp -r ~/repo/packages.core/core ~/repo/packages/
      # assign folders permissions
      - run: php run.php --do=init_fs
      # check that mandatory directories are present and have correct access rights set
      - run: php run.php --do=test_fs-consistency
      # check ability to connect to the dbms service
      - run: php run.php --do=test_db-connectivity
      # create an empty database
      - run: php run.php --do=init_db
      # initialize database with demo data
      - run: php run.php --do=init_package --package=discope
      # run test units
      - run: php run.php --do=test_package --package=core
      # export logs on failure
      - run:
          command: |
            mkdir -p /tmp/dumps
            cp ~/repo/log/equal.log /tmp/dumps
          when: on_fail
      - store_artifacts:
          path: /tmp/dumps

# Orchestrate our job run sequence
workflows:
  build_and_test:
    jobs:
      - php_7-4
      - php_8-3
